jQuery((function(){"use strict";if($(".nav-toggle-btn").on("click",(function(e){$(".nav-toggle-btn, .nav-backdrop-container").toggleClass("active")})),$(".nav-backdrop-container").on("click",(function(e){$(".nav-toggle-btn, .nav-backdrop-container").removeClass("active")})),$(".test-popup-link").magnificPopup({type:"image",gallery:{enabled:!0},image:{titleSrc:"title"}}),$(".back-to-top").length){const e=100,t=function(){$(window).scrollTop()>e?$(".back-to-top").addClass("show"):($(".back-to-top").removeClass("show"),$(".show-fire").removeClass("show"))};t(),$(window).on("scroll",(function(){t()})),$(".back-to-top").on("click",(function(e){e.preventDefault(),$(".show-fire").addClass("show"),$("html,body").animate({scrollTop:0},50)}))}$(".scrollTo").on("click",(function(){const e=$(this).attr("href");if($(e).length){const t=$(e).offset().top;$("html,body").animate({scrollTop:t-20},100,"linear")}return $(".nav-toggle-btn, .nav-backdrop-container").removeClass("active"),!1}))}));var e=document.querySelectorAll(".about-container__box--img");new simpleParallax(e,{}),$(".slick-slider").slick({slidesToShow:1,arrows:!0,dots:!1,autoplay:!0,autoplaySpeed:1e4,cssEase:"ease-out",asNavFor:".slider-nav",prevArrow:$(".left-nav-custom"),nextArrow:$(".right-nav-custom")}),$(".slider-nav").slick({arrows:!1,slidesToShow:3,slidesToScroll:1,asNavFor:".slick-slider",dots:!1,centerMode:!0,focusOnSelect:!0,centerPadding:!0}),particlesJS("particles-js",{particles:{number:{value:65},color:{value:"#ddd"},shape:{type:"circle",stroke:{width:1,color:"#ddd"}},image:{src:"some link"},opacity:{value:.5,random:!0,anim:{enable:!1,speed:1}},size:{value:3,random:!0,anim:{enable:!1,speed:100,size_min:.1,sync:!1}},line_linked:{enable:!0,distance:150,color:"#ddd",width:1},move:{enable:!0,speed:3,direction:"none"}},interactivity:{events:{onhover:{enable:!0,mode:"repulse"},onclick:{enable:!0,mode:"push"}},modes:{repulse:{distance:50,duration:.4}}}});let t="https://milanzivanov.github.io/Data/works.json",n=document.querySelector(".projects__content"),o=document.querySelector(".projects .wrapper-inner");async function a(){const e=await fetch(t),a=await e.json();let s=a.works,i=document.createElement("h2");i.classList.add("projects-title"),i.textContent=a.titleName,o.appendChild(i),output="";for(let e of s)output+=`\n    \n\n      <div class="projects__row projects__row--reverse">\n          <div class="projects__row--img">\n              <img src="${e.src}" alt="${e.author}" />\n          </div>\n          <div class="projects__row--text">\n              <div class="text-container">\n                  <h2 class="text-container--title">${e.title}</h2>\n                  <p class="text-container--description">${e.body}</p>\n\n                  <a \n                      class="test-popup-link btn btn--med btn--theme" \n                      href="${e.linkSrc}"\n                      target="_blank">\n                      Case Study\n                  </a>\n              </div>\n          </div>\n          \n      </div>\n      `;n.innerHTML=output}a();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
