jQuery((function(){"use strict";if($(".nav-toggle-btn").on("click",(function(e){$(".nav-toggle-btn, .nav-backdrop-container").toggleClass("active")})),$(".nav-backdrop-container").on("click",(function(e){$(".nav-toggle-btn, .nav-backdrop-container").removeClass("active")})),$(".magnific-popup-link").magnificPopup({type:"image",gallery:{enabled:!0},image:{titleSrc:"title"}}),$(".back-to-top").length){const e=100,n=function(){$(window).scrollTop()>e?$(".back-to-top").addClass("show"):($(".back-to-top").removeClass("show"),$(".show-fire").removeClass("show"))};n(),$(window).on("scroll",(function(){n()})),$(".back-to-top").on("click",(function(e){e.preventDefault(),$(".show-fire").addClass("show"),$("html,body").animate({scrollTop:0},50)}))}$(".scrollTo").on("click",(function(){const e=$(this).attr("href");if($(e).length){const n=$(e).offset().top;$("html,body").animate({scrollTop:n-20},100,"linear")}return $(".nav-toggle-btn, .nav-backdrop-container").removeClass("active"),!1}))})),$(".slick-slider").slick({slidesToShow:1,arrows:!0,dots:!1,autoplay:!0,autoplaySpeed:1e4,cssEase:"ease-out",asNavFor:".slider-nav",prevArrow:$(".left-nav-custom"),nextArrow:$(".right-nav-custom")}),$(".slider-nav").slick({arrows:!1,slidesToShow:3,slidesToScroll:1,asNavFor:".slick-slider",dots:!1,centerMode:!0,focusOnSelect:!0}),particlesJS("particles-js",{particles:{number:{value:65},color:{value:"#ddd"},shape:{type:"circle",stroke:{width:1,color:"#ddd"}},image:{src:"some link"},opacity:{value:.5,random:!0,anim:{enable:!1,speed:1}},size:{value:3,random:!0,anim:{enable:!1,speed:100,size_min:.1,sync:!1}},line_linked:{enable:!0,distance:150,color:"#ddd",width:1},move:{enable:!0,speed:3,direction:"none"}},interactivity:{events:{onhover:{enable:!0,mode:"repulse"},onclick:{enable:!0,mode:"push"}},modes:{repulse:{distance:50,duration:.4}}}}),AOS.init();let e="https://milanzivanov.github.io/Data/works.json",n=document.querySelector(".projects__content");async function t(){const t=await fetch(e);let o=(await t.json()).works;output="";for(let e of o)output+=`\n    \n\n      <div \n        class="projects__row projects__row--reverse"\n        data-aos="flip-left">\n          <div class="projects__row--img">\n              <a \n                  href="${e.linkSrc}"\n                  rel="dns-prefetch"\n                  class="magnific-popup-link" \n                  target="_blank">\n\n                <picture loading="lazy">\n                  <source media="(min-width: 1366px)" srcset="${e.srcLargeDesktop}">\n                  <source media="(min-width: 1024px)" srcset="${e.srcDesktop}">\n                  <source media="(min-width: 360px)" srcset="${e.srcMobile}">\n                  <img \n                    loading="lazy"\n                    src="${e.src}" \n                    alt="${e.title}" />\n                </picture>\n\n              </a>\n          </div>\n\n          <div class="projects__row--text">\n              <div class="text-container">\n                  <h3 class="section-h3-title project-container--title">\n                    ${e.title}\n                  </h3>\n                  <p class="paragraph-primary-16 text-container--description">${e.body}</p>\n\n                  <a \n                      class="popup-link btn btn--size btn--theme"\n                      rel="dns-prefetch" \n                      href="${e.linkSrc}"\n                      target="_blank">\n                      Case Study\n                  </a>\n              </div>\n          </div>\n          \n      </div>\n      `;n.innerHTML=output}t();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
