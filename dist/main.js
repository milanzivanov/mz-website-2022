async function e(){const e=new Request("https://milanzivanov.github.io/Data/works.json"),o=await fetch(e),a=await o.json();t(a),n(a)}function t(e){const t=document.querySelector(".skills-container-icons"),n=e.skills;let o="";for(const e of n)o+=`\n      <div class="skill-icon">\n        <i \n          class="${e.iconClass}"\n          data-aos="fade-up">\n        </i>\n        <p>${e.iconTitle}</p>\n      </div>\n    `;t.innerHTML=o}function n(e){const t=document.querySelector(".projects__content"),n=e.works;for(const e of n){const n=document.createElement("div");n.className="projects__row projects__row--reverse",n.setAttribute("data-aos","flip-left");const o=document.createElement("div");o.classList.add("projects__row--img"),n.appendChild(o);const a=document.createElement("a");a.className="magnific-popup-link",a.href=e.linkSrc,a.rel="dns-prefetch",a.target="_blank";const c=document.createElement("img");c.src=e.src,c.setAttribute("loading","lazy");const s=document.createElement("div");s.className="projects__row--text",n.appendChild(s);const i=document.createElement("div");i.classList.add("text-container"),s.appendChild(i);const l=document.createElement("h3");l.className="section-h3-title project-container--title",l.textContent=e.title,i.appendChild(l);const r=document.createElement("div");r.classList.add("text-container--description"),i.appendChild(r);const d=document.createElement("p");d.className="paragraph-primary-16 paragraph-text",d.textContent=e.body,r.appendChild(d);const p=document.createElement("p");p.classList.add("paragraph-time"),p.textContent=e.projectTime,r.appendChild(p);const m=document.createElement("div");m.classList.add("skill-container"),r.appendChild(m);const u=document.createElement("p");u.classList.add("paragraph-strong"),u.textContent="Skill used:",m.appendChild(u);const h=document.createElement("ul");h.classList.add("list-icon-container"),m.appendChild(h),o.appendChild(a),a.appendChild(c);const v=document.createElement("a");v.className="popup-link btn btn--size btn--theme",v.href=e.linkSrc,v.target="_blank",v.rel="dns-prefetch",v.textContent="View It Here",i.appendChild(v),t.appendChild(n);const f=e.technologiesUsed;for(const e of f){const t=document.createElement("li"),n=document.createElement("i");n.className=e.svgIcon+" devicon",h.appendChild(t),t.appendChild(n)}}}jQuery((function(){"use strict";if($(".nav-toggle-btn").on("click",(function(e){$(".nav-toggle-btn, .nav-backdrop-container").toggleClass("active")})),$(".nav-backdrop-container").on("click",(function(e){$(".nav-toggle-btn, .nav-backdrop-container").removeClass("active")})),$(".magnific-popup-link").magnificPopup({type:"image",gallery:{enabled:!0},image:{titleSrc:"title"}}),$(".back-to-top").length){const e=100,t=function(){$(window).scrollTop()>e?$(".back-to-top").addClass("show"):($(".back-to-top").removeClass("show"),$(".show-fire").removeClass("show"))};t(),$(window).on("scroll",(function(){t()})),$(".back-to-top").on("click",(function(e){e.preventDefault(),$(".show-fire").addClass("show"),$("html,body").animate({scrollTop:0},50)}))}$(".scrollTo").on("click",(function(){const e=$(this).attr("href");if($(e).length){const t=$(e).offset().top;$("html,body").animate({scrollTop:t-20},100,"linear")}return $(".nav-toggle-btn, .nav-backdrop-container").removeClass("active"),!1}))})),$(".slick-slider").slick({slidesToShow:1,arrows:!0,dots:!1,autoplay:!0,autoplaySpeed:1e4,cssEase:"ease-out",asNavFor:".slider-nav",prevArrow:$(".left-nav-custom"),nextArrow:$(".right-nav-custom")}),$(".slider-nav").slick({arrows:!1,slidesToShow:3,slidesToScroll:1,asNavFor:".slick-slider",dots:!1,centerMode:!0,focusOnSelect:!0}),particlesJS("particles-js",{particles:{number:{value:65},color:{value:"#ddd"},shape:{type:"circle",stroke:{width:1,color:"#ddd"}},image:{src:"some link"},opacity:{value:.5,random:!0,anim:{enable:!1,speed:1}},size:{value:3,random:!0,anim:{enable:!1,speed:100,size_min:.1,sync:!1}},line_linked:{enable:!0,distance:150,color:"#ddd",width:1},move:{enable:!0,speed:3,direction:"none"}},interactivity:{events:{onhover:{enable:!0,mode:"repulse"},onclick:{enable:!0,mode:"push"}},modes:{repulse:{distance:50,duration:.4}}}}),AOS.init({}),e();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
